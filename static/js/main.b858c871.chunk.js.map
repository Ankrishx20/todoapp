{"version":3,"sources":["Todo.js","App.js","serviceWorker.js","index.js"],"names":["getid","Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","e","input","target","value","setState","item","onClick","state","alert","todoListAdd","todoList","push","onedit","id","document","getElementById","style","display","onClickUpdate","arr","getElementsByClassName","onDelete","splice","_this2","arraymap","map","i","react_default","a","createElement","key","className","type","placeholder","onChange","Component","App","src_Todo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAEIA,EAAM,GAiGKC,cA9Ff,SAAAA,EAAYC,GACZ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACAE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMNQ,gBAAgB,SAACC,GACb,IAAMC,EAAMD,EAAEE,OAAOC,MACrBX,EAAKY,SAAS,CACVC,KAAMJ,KAVdT,EAcAc,QAAU,WACV,IAAML,EAAQT,EAAKe,MAAMF,KAEzB,GAAW,KAARJ,EAECO,MAAM,kCAEN,CACJ,IAAMC,EAAcjB,EAAKe,MAAMG,SAC/BD,EAAYE,KAAKV,GACjBT,EAAKY,SAAS,CACVM,SAASD,EACTJ,KAAK,OA1BTb,EA+BAoB,OAAS,SAACZ,GACN,IAAMa,EAAKb,EAAEE,OAAOW,GACpBxB,EAAMwB,EACNrB,EAAKY,SAAS,CACVC,KAAKb,EAAKe,MAAMG,SAASG,KAE7BC,SAASC,eAAe,WAAWC,MAAMC,QAAQ,OACjDH,SAASC,eAAe,cAAcC,MAAMC,QAAQ,QACpDjB,EAAEE,OAAOc,MAAMC,QAAQ,QAvC3BzB,EA2CA0B,cAAc,SAAClB,GACX,IAAMmB,EAAK3B,EAAKe,MAAMG,SACtBS,EAAI9B,GAASG,EAAKe,MAAMF,KAExBb,EAAKY,SAAS,CACVM,SAASS,EACTd,KAAK,KAETS,SAASC,eAAe,WAAWC,MAAMC,QAAQ,QACjDH,SAASC,eAAe,cAAcC,MAAMC,QAAQ,OACpDH,SAASM,uBAAuB,QAAQ,GAAGJ,MAAMC,QAAQ,SArD7DzB,EAwDA6B,SAAW,SAACrB,GACR,IAAMX,EAAQW,EAAEE,OAAOW,GACjBJ,EAAcjB,EAAKe,MAAMG,SAC/BD,EAAYa,OAAOjC,EAAM,GACzBG,EAAKY,SAAS,CACVM,SAASD,KA3DjBjB,EAAKe,MAAQ,CACTF,KAAK,GACLK,SAAS,IAJblB,wEAgEY,IAAA+B,EAAA5B,KAEE6B,EAAW7B,KAAKY,MAAMG,SAASe,IAAI,SAACzB,EAAE0B,GACxC,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GAAI1B,EAEpB2B,EAAAC,EAAAC,cAAA,QAAMhB,GAAIa,EAAGpB,QAASiB,EAAKF,UAA3B,MACAM,EAAAC,EAAAC,cAAA,QAAMhB,GAAIa,EAAGK,UAAU,OAAOzB,QAASiB,EAAKX,QAA5C,WAIJ,OACIe,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UAASJ,EAAAC,EAAAC,cAAA,+BACxBF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,UACKL,IAGTG,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACXJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAO7B,MAAOR,KAAKY,MAAMF,KAAM4B,YAAY,kBAAkBC,SAAUvC,KAAKI,kBACxF4B,EAAAC,EAAAC,cAAA,UAAQhB,GAAG,UAAUP,QAASX,KAAKW,SAAnC,KACAqB,EAAAC,EAAAC,cAAA,UAAQhB,GAAG,aAAaP,QAASX,KAAKuB,eAAtC,mBAxFDiB,aCUJC,MARf,WACE,OACET,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACQ,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAAS/B,SAASC,eAAe,SD2H3C,kBAAmB+B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b858c871.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\n\r\nlet getid=\"\";\r\nclass Todo extends Component{\r\n   \r\nconstructor(props)\r\n{\r\nsuper(props);\r\nthis.state = {\r\n    item:'',\r\n    todoList:[]}\r\n}\r\n \r\nonChangeHandler=(e)=>{\r\n    const input=e.target.value;\r\n    this.setState({\r\n        item: input\r\n    })\r\n}\r\n\r\nonClick = ()=>{\r\nconst input = this.state.item;\r\n\r\nif(input===\"\")\r\n{\r\n    alert(\"Enter some todo task first\");\r\n}\r\nelse{\r\nconst todoListAdd = this.state.todoList;\r\ntodoListAdd.push(input);\r\nthis.setState({\r\n    todoList:todoListAdd,\r\n    item:''\r\n})\r\n}\r\n}\r\n\r\nonedit = (e)=>{\r\n    const id = e.target.id;\r\n    getid=id;\r\n    this.setState({\r\n        item:this.state.todoList[id]\r\n    })\r\n    document.getElementById(\"addData\").style.display=\"none\";\r\n    document.getElementById(\"updateData\").style.display=\"block\";\r\n    e.target.style.display=\"none\";\r\n    \r\n}\r\n\r\nonClickUpdate=(e)=>{\r\n    const arr =this.state.todoList;\r\n    arr[getid] = this.state.item;\r\n\r\n    this.setState({\r\n        todoList:arr,\r\n        item:''\r\n    }) \r\n    document.getElementById(\"addData\").style.display=\"block\";\r\n    document.getElementById(\"updateData\").style.display=\"none\";\r\n    document.getElementsByClassName(\"edit\")[0].style.display=\"block\";\r\n}\r\n\r\nonDelete = (e)=>{\r\n    const getid = e.target.id;\r\n    const todoListAdd = this.state.todoList;\r\n    todoListAdd.splice(getid,1);\r\n    this.setState({\r\n        todoList:todoListAdd\r\n    })\r\n}\r\n    render(){\r\n\r\n        const arraymap = this.state.todoList.map((e,i)=>{\r\n            return <li key={i}>{e} \r\n            \r\n            <span id={i} onClick={this.onDelete}>x </span>\r\n            <span id={i} className=\"edit\" onClick={this.onedit}>Edit</span> \r\n            </li>\r\n        })\r\n\r\n        return(\r\n            <section>\r\n                <div className=\"header\"><p>To-Do Application</p></div>\r\n                <div className=\"todoItem\">\r\n                    <ul>\r\n                        {arraymap}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"footer\">\r\n                    <input type=\"text\" value={this.state.item} placeholder=\"Enter your task\" onChange={this.onChangeHandler}/>\r\n                    <button id=\"addData\" onClick={this.onClick}>+</button>  \r\n                    <button id=\"updateData\" onClick={this.onClickUpdate}>âœŽ</button>  \r\n                </div>\r\n\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todo;","import React from 'react';\nimport './App.css';\n\nimport Todo from './Todo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}